"""EmbeddingType, MemoryChunk, OpenAIEmbedding

Revision ID: cf453c3d4c3a
Revises: 5bf5c9f1e2f3
Create Date: 2025-05-31 22:30:13.495917

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector


# revision identifiers, used by Alembic.
revision: str = "cf453c3d4c3a"
down_revision: Union[str, None] = "5bf5c9f1e2f3"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "embedding_types",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "name",
            sa.Enum(
                "TEXT",
                "AUDIO",
                "VIDEO",
                "IMAGE",
                "URL",
                "PDF",
                "DOCUMENT",
                "EXCEL",
                "POWERPOINT",
                "CSV",
                "JSON",
                "XML",
                name="embeddingtypename",
            ),
            nullable=False,
        ),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "memory_chunks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_memory_chunks_user_id"), "memory_chunks", ["user_id"], unique=False)
    op.create_table(
        "openai_embeddings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("chunk_id", sa.Integer(), nullable=False),
        sa.Column("embedding", pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=False),
        sa.Column("embedding_model_name", sa.String(length=100), nullable=False),
        sa.Column("embedding_type_id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["chunk_id"], ["memory_chunks.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["embedding_type_id"],
            ["embedding_types.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("openai_embeddings")
    op.drop_index(op.f("ix_memory_chunks_user_id"), table_name="memory_chunks")
    op.drop_table("memory_chunks")
    op.drop_table("embedding_types")
    # ### end Alembic commands ###
